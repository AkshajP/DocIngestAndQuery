FROM python:3.10-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    python3-dev \
    git \
    curl \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libpq-dev \  
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Clone and install MinerU
RUN git clone -b release-1.2.2 https://github.com/opendatalab/MinerU.git

# Install MinerU and its dependencies
WORKDIR /app/MinerU
RUN pip install ".[full]" --extra-index-url https://wheels.myhloli.com && \
    pip install huggingface_hub

# Return to app directory
WORKDIR /app

# Download the model script (but don't run it during build)
RUN curl -o download_models_hf.py https://raw.githubusercontent.com/opendatalab/MinerU/release-1.2.2/scripts/download_models_hf.py

# Clean up the repository
RUN rm -rf MinerU

# Copy application code
COPY . .

# Create document store directory
RUN mkdir -p document_store

# Create cache directory
RUN mkdir -p /root/.cache

# Create startup script that downloads models and updates config
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Function to update config.json with environment variables\n\
update_config() {\n\
    echo "Updating config.json with environment variables..."\n\
    \n\
    # Update vector_db host and port\n\
    if [ ! -z "$DOCRAG_VECTOR_DB_HOST" ]; then\n\
        python3 -c "\n\
import json\n\
import os\n\
with open('"'"'config.json'"'"', '"'"'r'"'"') as f:\n\
    config = json.load(f)\n\
config['"'"'vector_db'"'"']['"'"'host'"'"'] = os.getenv('"'"'DOCRAG_VECTOR_DB_HOST'"'"', '"'"'localhost'"'"')\n\
config['"'"'vector_db'"'"']['"'"'port'"'"'] = os.getenv('"'"'DOCRAG_VECTOR_DB_PORT'"'"', '"'"'19530'"'"')\n\
# Add Celery config updates\n\
if '"'"'celery'"'"' not in config:\n\
    config['"'"'celery'"'"'] = {}\n\
config['"'"'celery'"'"']['"'"'broker_url'"'"'] = os.getenv('"'"'CELERY_BROKER_URL'"'"', '"'"'redis://localhost:6379/0'"'"')\n\
config['"'"'celery'"'"']['"'"'result_backend'"'"'] = os.getenv('"'"'CELERY_RESULT_BACKEND'"'"', '"'"'redis://localhost:6379/1'"'"')\n\
with open('"'"'config.json'"'"', '"'"'w'"'"') as f:\n\
    json.dump(config, f, indent=2)\n\
print('"'"'Updated configuration with environment variables'"'"')\n\
"\n\
    fi\n\
}\n\
\n\
# Function to download models with retry logic (existing)\n\
download_models() {\n\
    local max_retries=3\n\
    local retry_delay=30\n\
    \n\
    for ((i=1; i<=max_retries; i++)); do\n\
        echo "Attempt $i of $max_retries: Downloading models..."\n\
        if timeout 1800 python download_models_hf.py; then\n\
            echo "Models downloaded successfully!"\n\
            touch /root/.cache/models_downloaded\n\
            return 0\n\
        else\n\
            echo "Download attempt $i failed"\n\
            if [ $i -lt $max_retries ]; then\n\
                echo "Retrying in $retry_delay seconds..."\n\
                sleep $retry_delay\n\
            fi\n\
        fi\n\
    done\n\
    \n\
    echo "Warning: Failed to download models after $max_retries attempts"\n\
    return 1\n\
}\n\
\n\
# Update configuration\n\
update_config\n\
\n\
# Check if running as Celery worker\n\
if [ "$CELERY_WORKER" == "true" ]; then\n\
    echo "Starting Celery worker..."\n\
    exec python worker.py\n\
else\n\
    # Download models only for web server\n\
    if [ ! -f "/root/.cache/models_downloaded" ]; then\n\
        echo "Models not found. Downloading on first startup..."\n\
        download_models\n\
    else\n\
        echo "Models already downloaded, skipping download"\n\
    fi\n\
    \n\
    echo "Starting web application..."\n\
    exec uvicorn main:app --host 0.0.0.0 --port 9000\n\
fi' > /app/startup.sh

# Make startup script executable
RUN chmod +x /app/startup.sh

# Expose the port
EXPOSE 9000

# Set environment variables
ENV PYTHONPATH=/app

# Use startup script instead of direct uvicorn command
CMD ["/app/startup.sh"]