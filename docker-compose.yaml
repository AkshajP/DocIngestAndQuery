version: '3.8'

services:
  # Existing services from your docker-compose.yaml
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000

      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - app-network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  postgres:
    container_name: postgres
    image: postgres:15
    environment:
      POSTGRES_USER: youruser
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_DB: yourdb
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/postgres:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5433:5432"

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.10
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    networks:
      - app-network
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
  
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: adminpassword
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/pgadmin:/var/lib/pgadmin
    networks:
      - app-network
    ports:
      - "8080:80"
    depends_on:
      - postgres
      
  attu:
    image: zilliz/attu:v2.5.4
    environment:
      - MILVUS_URL=http://standalone:19530
    ports:
      - "8000:3000"
    depends_on:
      - standalone
    networks:
      - app-network

  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/redis:/data
    networks:
      - app-network
    command: redis-server --appendonly yes

  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: docrag-worker
    restart: always
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - DOCRAG_DATABASE_HOST=postgres
      - DOCRAG_DATABASE_PORT=5432
      - DOCRAG_VECTOR_DB_HOST=standalone
      - DOCRAG_VECTOR_DB_PORT=19530
      - DATABASE_URL=postgresql://youruser:yourpassword@postgres:5432/yourdb
      - MILVUS_HOST=standalone
      - MILVUS_PORT=19530
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=postgresql://youruser:yourpassword@postgres:5432/yourdb
      - CELERY_WORKER=true  # Flag to start as worker
    depends_on:
      - postgres
      - standalone
      - redis
    volumes:
      - ./document_store:/app/document_store
      - model_cache:/root/.cache
      - pip_cache:/root/.cache/pip
    networks:
      - app-network
    command: python worker.py

  #  backend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.backend
  #   container_name: docrag-backend
  #   restart: always
  #   dns:
  #     - 8.8.8.8
  #     - 8.8.4.4
  #     - 1.1.1.1
  #   ports:
  #     - "9000:9000"
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   environment:
  #     - DOCRAG_DATABASE_HOST=postgres
  #     - DOCRAG_DATABASE_PORT=5432
  #     - DOCRAG_VECTOR_DB_HOST=standalone
  #     - DOCRAG_VECTOR_DB_PORT=19530
  #     - DATABASE_URL=postgresql://youruser:yourpassword@postgres:5432/yourdb
  #     - MILVUS_HOST=standalone
  #     - MILVUS_PORT=19530
  #     - OLLAMA_BASE_URL=http://host.docker.internal:11434
  #     - REDIS_URL=redis://redis:6379/0
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=postgresql://youruser:yourpassword@postgres:5432/yourdb
  #   depends_on:
  #     - postgres
  #     - standalone
  #     - redis
  #   volumes:
  #     - ./document_store:/app/document_store
  #     - model_cache:/root/.cache
  #     - pip_cache:/root/.cache/pip
  #   networks:
  #     - app-network
    # network_mode: "host"
    # Optional: Add health check
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    # deploy:
      # resources:
      #   reservations:
      #     devices:
      #       - driver: nvidia
      #         count: 1
      #         capabilities: [gpu]

  # Add frontend service
  # frontend:
  #   build:
  #     context: ./frontend/docllm
  #     dockerfile: ../../Dockerfile.frontend
  #   container_name: docrag-frontend
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NEXT_PUBLIC_API_BASE_URL=http://localhost:9000/ai
  #     - BACKEND_API_URL=http://backend:9000/
  #   networks:
  #     - app-network
  #   depends_on:
  #     - backend

volumes:
  etcd:
    driver: local
  minio:
    driver: local
  milvus:
    driver: local
  postgres:
    driver: local
  pgadmin:
    driver: local
  document_store:
    driver: local
  model_cache:
    driver: local
  pip_cache:
    driver: local
  redis:
    driver: local

networks:
  app-network:
    driver: bridge